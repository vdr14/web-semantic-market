#################################################################
#    SHACL Shapes
#################################################################

@prefix : <http://www.semanticweb.org/My_Super/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix gr: <http://purl.org/goodrelations/v1#> .

###  SHACL Shapes for Product Input
:ProductShape a sh:NodeShape ;
    sh:targetClass gr:ProductOrService ;

    # ProductID (must exist)
    sh:property [
        sh:path :hasProductID ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Product id is required." ;
    ] ;

    # Price (must exist, must be >0)
    sh:property [
        sh:path :hasPrice ;
        sh:datatype xsd:double ;
        sh:minCount 1 ;
        sh:minExclusive 0 ;
        sh:message "Price must be greater than 0." ;
    ] ;

    # DiscountPrice (must exist, must be >=0)
    sh:property [
        sh:path :hasDiscountPrice ;
        sh:datatype xsd:double ;
        sh:minCount 1 ;
        sh:minInclusive 0 ;
        sh:message "Discount price must be 0 or greater." ;
    ] ;

    # Product Name (must exist)
    sh:property [
        sh:path gr:name ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Product name is required." ;
    ] ;

    # Brand (must exist)
    sh:property [
        sh:path :hasBrand ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Brand is required." ;
    ] ;

    # Quantity (must exist)
    sh:property [
        sh:path :hasQuantity ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Quantity must be specified." ;
    ] ;

    # Availability (must exist, boolean)
    sh:property [
        sh:path :isAvailable ;
        sh:datatype xsd:boolean ;
        sh:minCount 1 ;
        sh:message "Availability status is required." ;
    ] ;

    # Stock (must exist, must be >= 0)
    sh:property [
        sh:path :hasStock ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:minInclusive 0 ;
        sh:message "Stock quantity must be 0 or greater." ;
    ] .

:UniqueProductIDShape
    a sh:NodeShape ;
    sh:targetObjectsOf :hasProductID ;
    sh:property [
        sh:path [ sh:inversePath :hasProductID ] ;
        sh:maxCount 1 ;
        sh:message "Each product must have a unique ProductID." ;
    ] .

###  SHACL Shapes for NormalUser
:NormalUserShape a sh:NodeShape ;
    sh:targetClass :NormalUser ;

    # Name (must exist)
    sh:property [
        sh:path :hasName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "User must have a first name." ;
    ] ;

    # Surname (must exist)
    sh:property [
        sh:path :hasSurname ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "User must have a surname." ;
    ] ;

     # Username (must exist)
    sh:property [
        sh:path :hasUsername ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Each user must have a username." ;
    ] ;

    # Password (must exist)
    sh:property [
        sh:path :hasPassword ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "Each user must have a password" ;
    ] ;

    # Address (must exist)
    sh:property [
        sh:path :hasAddress ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "User must have at least one address." ;
    ] .

:UniqueUsernameShape
    a sh:NodeShape ;
    sh:targetObjectsOf :hasUsername ; 
    sh:property [
        sh:path [ sh:inversePath :hasUsername ] ;
        sh:maxCount 1 ;
        sh:message "Each username must be unique." ;
    ] .
